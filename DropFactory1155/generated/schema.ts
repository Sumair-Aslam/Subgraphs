// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Drop extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Drop entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Drop must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Drop", id.toString(), this);
    }
  }

  static load(id: string): Drop | null {
    return changetype<Drop | null>(store.get("Drop", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cloneId(): Bytes {
    let value = this.get("cloneId");
    return value!.toBytes();
  }

  set cloneId(value: Bytes) {
    this.set("cloneId", Value.fromBytes(value));
  }

  get cloneAddress(): Bytes {
    let value = this.get("cloneAddress");
    return value!.toBytes();
  }

  set cloneAddress(value: Bytes) {
    this.set("cloneAddress", Value.fromBytes(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _dropId(): Bytes {
    let value = this.get("_dropId");
    return value!.toBytes();
  }

  set _dropId(value: Bytes) {
    this.set("_dropId", Value.fromBytes(value));
  }

  get _nftAddress(): Bytes {
    let value = this.get("_nftAddress");
    return value!.toBytes();
  }

  set _nftAddress(value: Bytes) {
    this.set("_nftAddress", Value.fromBytes(value));
  }

  get _tokenIds(): Array<BigInt> | null {
    let value = this.get("_tokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set _tokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("_tokenIds");
    } else {
      this.set("_tokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get _amounts(): Array<BigInt> | null {
    let value = this.get("_amounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set _amounts(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("_amounts");
    } else {
      this.set("_amounts", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get _price(): Array<BigInt> | null {
    let value = this.get("_price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set _price(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("_price");
    } else {
      this.set("_price", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get _tokenId(): BigInt | null {
    let value = this.get("_tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set _tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("_tokenId");
    } else {
      this.set("_tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get eventType(): string {
    let value = this.get("eventType");
    return value!.toString();
  }

  set eventType(value: string) {
    this.set("eventType", Value.fromString(value));
  }
}
