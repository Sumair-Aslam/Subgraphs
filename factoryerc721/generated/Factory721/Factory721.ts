// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloneCreated extends ethereum.Event {
  get params(): CloneCreated__Params {
    return new CloneCreated__Params(this);
  }
}

export class CloneCreated__Params {
  _event: CloneCreated;

  constructor(event: CloneCreated) {
    this._event = event;
  }

  get cloneId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get cloneAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory721 extends ethereum.SmartContract {
  static bind(address: Address): Factory721 {
    return new Factory721("Factory721", address);
  }

  beaconOwner(): Address {
    let result = super.call("beaconOwner", "beaconOwner():(address)", []);

    return result[0].toAddress();
  }

  try_beaconOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("beaconOwner", "beaconOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cloneAddresses(param0: Bytes): Address {
    let result = super.call(
      "cloneAddresses",
      "cloneAddresses(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_cloneAddresses(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cloneAddresses",
      "cloneAddresses(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createNFT721(_cloneId: Bytes): Address {
    let result = super.call("createNFT721", "createNFT721(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_cloneId)
    ]);

    return result[0].toAddress();
  }

  try_createNFT721(_cloneId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createNFT721",
      "createNFT721(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_cloneId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCloneAddress(_id: Bytes): Address {
    let result = super.call(
      "getCloneAddress",
      "getCloneAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_id)]
    );

    return result[0].toAddress();
  }

  try_getCloneAddress(_id: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCloneAddress",
      "getCloneAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBeacon(): Address {
    let result = super.call("tokenBeacon", "tokenBeacon():(address)", []);

    return result[0].toAddress();
  }

  try_tokenBeacon(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenBeacon", "tokenBeacon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class __Factory721_initCall extends ethereum.Call {
  get inputs(): __Factory721_initCall__Inputs {
    return new __Factory721_initCall__Inputs(this);
  }

  get outputs(): __Factory721_initCall__Outputs {
    return new __Factory721_initCall__Outputs(this);
  }
}

export class __Factory721_initCall__Inputs {
  _call: __Factory721_initCall;

  constructor(call: __Factory721_initCall) {
    this._call = call;
  }
}

export class __Factory721_initCall__Outputs {
  _call: __Factory721_initCall;

  constructor(call: __Factory721_initCall) {
    this._call = call;
  }
}

export class CreateNFT721Call extends ethereum.Call {
  get inputs(): CreateNFT721Call__Inputs {
    return new CreateNFT721Call__Inputs(this);
  }

  get outputs(): CreateNFT721Call__Outputs {
    return new CreateNFT721Call__Outputs(this);
  }
}

export class CreateNFT721Call__Inputs {
  _call: CreateNFT721Call;

  constructor(call: CreateNFT721Call) {
    this._call = call;
  }

  get _cloneId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateNFT721Call__Outputs {
  _call: CreateNFT721Call;

  constructor(call: CreateNFT721Call) {
    this._call = call;
  }

  get cloneAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
